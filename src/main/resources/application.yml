server:
  port: 8080

spring:
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  application:
    name: BlogApplication

  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://<DB_HOST>:3306/blog?serverTimezone=Asia/Shanghai&allowMultiQueries=true&rewriteBatchedStatements=true
    username: <DB_USERNAME>
    password: <DB_PASSWORD>
    druid:
      initial-size: 10
      min-idle: 10
      max-active: 150
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 600000
      max-evictable-idle-time-millis: 900000
      validation-query: SELECT 1 FROM DUAL
      validation-query-timeout: 500
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false

  servlet:
    multipart:
      max-request-size: 100MB
      max-file-size: 100MB

  redis:
    host: <REDIS_HOST>
    port: 6379
    password: <REDIS_PASSWORD>
    timeout: 10s
    lettuce:
      pool:
        max-active: 150
        max-wait: 5000ms
        max-idle: 100
        min-idle: 50

  rabbitmq:
    host: <RABBITMQ_HOST>
    port: 5672
    username: <RABBITMQ_USERNAME>
    password: <RABBITMQ_PASSWORD>
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 3000
          max-attempts: 3

  mail:
    host: smtp.example.com
    username: <EMAIL_USERNAME>
    password: <EMAIL_PASSWORD>

blog:
  url: http://localhost:1314/

thread:
  pool:
    core-pool-size: 5
    max-pool-size: 10
    queue-capacity: 50
    keep-alive-seconds: 60

search:
  mode: mysql

upload:
  strategy: local
  local:
    url: https://static.example.com/
    path: /usr/local/upload/
  oss:
    url: https://your-bucket.oss-region.aliyuncs.com/
    endpoint: oss-region.aliyuncs.com
    bucketName: <OSS_BUCKET>
    accessKeyId: <OSS_KEY_ID>
    accesskeySecret: <OSS_SECRET>
  cos:
    url: https://your-bucket.cos.region.myqcloud.com/
    secretId: <COS_ID>
    secretKey: <COS_KEY>
    region: <COS_REGION>
    bucketName: <COS_BUCKET>
  qiniu:
    url: https://<QINIU_DOMAIN>/
    bucketName: <QINIU_BUCKET>
    region: <QINIU_REGION>
    accessKey: <QINIU_ACCESS_KEY>
    secretKey: <QINIU_SECRET_KEY>

mybatis-plus:
  mapper-locations: classpath:mapper/*.xml
  type-aliases-package: com.shelly.entity.pojo
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    map-underscore-to-camel-case: true
  global-config:
    db-config:
      table-prefix: t_

elasticsearch:
  username: <ES_USERNAME>
  password: <ES_PASSWORD>
  hostname: <ES_HOST>
  port: 9200
  scheme: http
  connTimeout: 1000
  socketTimeout: 30000
  connectionRequestTimeout: 5000

sa-token:
  token-name: Authorization
  token-prefix: Bearer
  timeout: 1800
  active-timeout: -1
  auto-renew: false
  is-concurrent: true
  token-style: uuid
  is-share: false
  max-login-count: 20
  is-read-cookie: false
  is-read-body: false
  is-read-header: true
  is-log: false

oauth:
  gitee:
    client-id: <GITEE_CLIENT_ID>
    client-secret: <GITEE_SECRET>
    grant_type: authorization_code
    redirect-uri: https://www.example.com/oauth/login/gitee
    access-token-url: https://gitee.com/oauth/token
    user-info-url: https://gitee.com/api/v5/user?access_token={access_token}
  github:
    client-id: <GITHUB_CLIENT_ID>
    client-secret: <GITHUB_SECRET>
    redirect-url: https://www.example.com/oauth/login/github
    access-token-url: https://github.com/login/oauth/access_token
    user-info-url: https://api.github.com/user
  qq:
    app-id: <QQ_APP_ID>
    app-key: <QQ_APP_KEY>
    grant_type: authorization_code
    redirect-url: https://www.example.com/oauth/login/qq
    access-token-url: https://graph.qq.com/oauth2.0/token
    user-openid-url: https://graph.qq.com/oauth2.0/me
    user-info-url: https://graph.qq.com/user/get_user_info

bili-url: https://api.bilibili.com/x/dynamic/feed/draw/upload_bfs
